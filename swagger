big pile of crap

swagger: '2.0'info:  title: Open Banking API - AIPSP API  description: Proof of Concept - Confirmation of Payee  version: draft-002  license:    name: 'MIT'    url: 'https://opensource.org/licenses/MIT'host: tbcschemes:  - httpsbasePath: /open-api/v1/produces:  - application/json
paths:  /branches:    get:      summary: List of branches      description: |        Returns a list of the AIPSP's branches.                The branches are returned as an array of JSON objects that follow a sub-set of the schema.org/Place schema.                It should be noted that the API _does not_ provide support for geo-spatial queries.               produces:         - application/json      tags:         - Branch      responses:        '200':          description: An array of branches represented as schema.org/Place JSON-LD objects.          schema:            type: array            items:              $ref: '#/definitions/Place'        default:          description: Unexpected error          schema:            $ref: '#/definitions/Error'              /branches/post-town/{post-town}:    get:      summary: List of branches in the specified town.      description: |        Returns a list of the AIPSP's branches.                The branches are returned as an array of JSON objects that follow a sub-set of the schema.org/Place schema.      produces:         - application/json      tags:         - Branch      parameters:        - name: post-town          in: path          description: Limits the results to branches in the specified post town          required: true          type: string        
      responses:        '200':          description: An array of branches represented as schema.org/Place JSON-LD objects.          schema:            type: array            items:              $ref: '#/definitions/Place'        default:          description: Unexpected error          schema:            $ref: '#/definitions/Error'
  /branches/postcode/{postcode}:    get:      summary: List of branches in the specified postcode.      description: |        Returns a list of the AIPSP's branches.                The branches are returned as an array of JSON objects that follow a sub-set of the schema.org/Place schema.      produces:         - application/json      tags:         - Branch      parameters:        - name: postcode          in: path          description: |            Limits the results to branches in the specified postcode.            The API will find all branches that begin with the postcode in the parameter.            e.g. /branches/postcode/EC1 will match all branches with a postcode begining with EC1.                      required: true          type: string        
      responses:        '200':          description: An array of branches represented as schema.org/Place JSON-LD objects.          schema:            type: array            items:              $ref: '#/definitions/Place'        default:          description: Unexpected error          schema:            $ref: '#/definitions/Error'              /register:    post:      summary: Request to register a TPP and issue OAuth 2.0 client id & secret.      description: |        The request follows [RFC-7591 - OAuth 2.0 Dynamic Registration](https://tools.ietf.org/html/rfc7591).                This API implements the Client Registration Endpoint as defined in [Section 3](https://tools.ietf.org/html/rfc7591#section-3) of the standard.                The TPP must call the API over a mutually authenticated TLS 1.2 connection. The AIPSP will ensure that registration request has been placed by the approprate TPP by ensuring that the TPP's participant id is consistent with the TPP's certificate in the TLS 1.2 transport layer. The AIPSP MAY carry out additional real-time checks as it deems appropriate.                If the request fails, the API fails with an HTTP response code 400 along with a Client Registration Error Response as defined in [Section 3.2.2](https://tools.ietf.org/html/rfc7591#section-3.2.2)                If the request succeeds, the call returns a Client Information Response as defined in [Section 3.2.1](https://tools.ietf.org/html/rfc7591#section-3.2.1)              consumes:        - application/json      produces:         - application/json      tags:         - Register              parameters:        - name: registration_request          in: body          description: |            The registration request as per [RFC-7591 Section 3](https://tools.ietf.org/html/rfc7591#section-3), constrained by additional rules imposed by Open Banking API.          schema:             $ref: '#/definitions/registration_request'          required: true        - name: authorisation          in: header          description: |            The participant_id must be included as a bearer in the authorisation header.                      e.g. Authorisation: BEARER PID-002-011--2016                        For the request to complete successfully, the AIPSP must ensure that the participant id matches the participant id provided in the digital certificate on the TLS layer.           type: String          required: true
      responses:        '200':          description: |            Indicates that the request was successful.            The server responds with a [Client Information Response](https://tools.ietf.org/html/rfc7591#section-3.2.1) that provides the client identifier, client secret and other details of the registration record.           schema:            $ref: '#/definitions/client_information_response'        '400':          description: |            Indicates that the request was not successful and the client was not registered.            The server responsds with a [Client Registration Error Response] (https://tools.ietf.org/html/rfc7591#section-3.2.2)          schema:            $ref: '#/definitions/client_registration_error_response'            definitions:  Place:    type: object    properties:      address:        $ref: '#/definitions/PostalAddress'      branchCode:        type: string        description: 'A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.'      description:        type: string        description: 'An description for the place'      name:        type: string        description: 'An name for the place'              faxNumber:        type: string        description: 'The fax number.'      telephone:        type: string        description: 'The telephone number for the place'      geo:        $ref: '#/definitions/GeoCoordinates'      hasMap:        type: string        description: 'An optional URL to a map of the place'      logo:        type: string        description: 'An optional URL to a logo for the place'      photo:        type: string        description: 'An optional URL to a photo for the place'      openingHoursSpecification:        type: array        items:          $ref: '#/definitions/OpeningHoursSpecification'      specialOpeningHoursSpecification:        type: array        items:          $ref: '#/definitions/OpeningHoursSpecification'
  PostalAddress:    description:       The postal address for this place.      The PostalAddress does _not_ follow the schema.org structure, but instead, uses a format similar to the one used by the Current Account Switcher Service (which is closely aligned with the "Premises elements" of PAF    type: object    properties:      subBuildingName:        type: string        description: 'An element representing a part of a building. e.g. Flat 1'      buildingName:        type: string        description: 'The name of the building. Not required if building number is specified. e.g. Rose Cottage'      buildingNumber:        type: string        description: 'An integer representing the building''s street number e.g. 22'      organisationName:        type: string        description: 'Optional. e.g. Cath''s Cakes'      poBoxNumber:        type: string        description: 'Optional.'      postTown:        type: string        description: 'Mandatory.'      postCode:        type: object        description: 'Mandatory. Postcode for the premises'      addressLines:        description:          An array of upto 5 lines that represents the address in a "free" format excluding the postcode.        type: array        items:           type: string
  GeoCoordinates:    type: object    properties:      elevation:        type: number        description: 'The elevation of a location. Optional'      latitude:        type: number        description: 'The latitude of a location. Use WGS 84 format.'      longitude:        type: string        description: 'The longitude of a location. Use WGS 84 format.'
  OpeningHoursSpecification:    type: object    properties:      opens:        type: string        description: 'The opening time in hh:mm:ss[Z|(+|-)hh:mm] format'      closes:        type: string        description: 'The closing time in hh:mm:ss[Z|(+|-)hh:mm] format'      dayOfWeek:        type: string        description: 'The day of week for which this specification is valid.'      validFrom:        type: string        description: 'The date from which this specification is valid. Expressed in [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] format'      validTo:        type: string        description: 'The date until which this specification is valid. Expressed in [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]  format'
  Error:    type: object    properties:      code:        type: integer        format: int32      message:        type: string      fields:        type: string
  registration_request:    type: object    properties:      redirect_uris:        description: |          Array of redirection URI strings for use in the redirect-based authorization code flow. As required by Section 2 of OAuth 2.0, clients using flows with redirection MUST register their redirection URI values.         type: array        items:           type: string      token_endpoint_auth_method:        type: string        description: |          String indicator of the requested authentication method for the token endpoint.  This API supports:          * "client_secret_post": The client uses the HTTP POST parameters as defined in OAuth 2.0, Section 2.3.1.          * "client_secret_basic": The client uses HTTP Basic as defined in OAuth 2.0, Section 2.3.1.      grant_types:        type: array        items:           type: string        description: |          Array of OAuth 2.0 grant type strings that the client can use at the token endpoint. <DISCUSS>Although the RFC describes multiple grant types, for the purposes of the Open API, only the following  grant types are supported:          *  "authorization_code": The authorization code grant type defined             in OAuth 2.0, Section 4.1.              *  "client_credentials": The client credentials grant type defined             in OAuth 2.0, Section 4.4.              *  "refresh_token": The refresh token grant type defined in OAuth             2.0, Section 6.              If the token endpoint is used in the grant type, the value of this          parameter MUST be the same as the value of the "grant_type"          parameter passed to the token endpoint defined in the grant type          definition.                      To use all the Open Banking APIs, the client must register with all four grant types      response_types:        type: array        items:           type: string        description: |          Array of the OAuth 2.0 response type strings that the client can          use at the authorization endpoint. <DISCUSS> Although the RFC allows a "code" or "token" response type, for the purposes of Open API, only the "code" response type will be supported.           *  "code": The authorization code response type defined in OAuth             2.0, Section 4.1.      client_name:        type: string        description: |          Human-readable string name of the client to be presented to the          end-user during authorization.  If omitted, the authorization          server MAY display the raw "client_id" value to the end-user          instead.  It is RECOMMENDED that clients always send this field.          The value of this field MAY be internationalized, as described in          Section 2.2.          <DISCUSS>This MUST be supplied and match the participant's name in the registry.      client_uri:        type: string        description: |          URL string of a web page providing information about the client.          If present, the server SHOULD display this URL to the end-user in          a clickable fashion.  It is RECOMMENDED that clients always send          this field.  The value of this field MUST point to a valid web          page.              logo_uri:        type: string        description: |          URL string that references a logo for the client.  If present, the          server SHOULD display this image to the end-user during approval.          The value of this field MUST point to a valid image file.  The          value of this field MAY be internationalized, as described in          Section 2.2.            scope:        type: string        description: |          String containing a space-separated list of scope values (as          described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client          can use when requesting access tokens.            <TODO - define the scopes valid for Open API>
      contacts:        type: string        description: |          Array of strings representing ways to contact people responsible          for this client, typically email addresses.  The authorization          server MAY make these contact addresses available to end-users for          support requests for the client.  See Section 6 for information on          Privacy Considerations.
      tos_uri:        type: string        description: |          <DISCUSS - Not supported>          URL string that points to a human-readable terms of service          document for the client that describes a contractual relationship          between the end-user and the client that the end-user accepts when          authorizing the client.  The authorization server SHOULD display          this URL to the end-user if it is provided.  The value of this          field MUST point to a valid web page.  The value of this field MAY          be internationalized, as described in Section 2.2.
      policy_uri:        type: string        description: |          URL string that points to a human-readable privacy policy document          that describes how the deployment organization collects, uses,          retains, and discloses personal data.  The authorization server          SHOULD display this URL to the end-user if it is provided.  The          value of this field MUST point to a valid web page.  The value of          this field MAY be internationalized, as described in Section 2.2.
      jwks_uri:        type: string        description: |          <DISCUSS - Not used>          URL string referencing the client's JSON Web Key (JWK) Set          [RFC7517] document, which contains the client's public keys.  The          value of this field MUST point to a valid JWK Set document.  These          keys can be used by higher-level protocols that use signing or          encryption.  For instance, these keys might be used by some          applications for validating signed requests made to the token          endpoint when using JWTs for client authentication [RFC7523].  Use          of this parameter is preferred over the "jwks" parameter, as it          allows for easier key rotation.  The "jwks_uri" and "jwks"          parameters MUST NOT both be present in the same request or response.
      jwks:        type: string        description: |          <DISCUSS - Not used>          Client's JSON Web Key Set [RFC7517] document value, which contains          the client's public keys.  The value of this field MUST be a JSON          object containing a valid JWK Set.  These keys can be used by          higher-level protocols that use signing or encryption.  This          parameter is intended to be used by clients that cannot use the          "jwks_uri" parameter, such as native clients that cannot host          public URLs.  The "jwks_uri" and "jwks" parameters MUST NOT both          be present in the same request or response.
      software_id:        type: string        description: |          <DISCUSS - Not used>          A unique identifier string (e.g., a Universally Unique Identifier          (UUID)) assigned by the client developer or software publisher          used by registration endpoints to identify the client software to          be dynamically registered.  Unlike "client_id", which is issued by          the authorization server and SHOULD vary between instances, the          "software_id" SHOULD remain the same for all instances of the          client software.  The "software_id" SHOULD remain the same across          multiple updates or versions of the same piece of software.  The          value of this field is not intended to be human readable and is          usually opaque to the client and authorization server.
      software_version:        type: string        description: |          <DISCUSS - Not used>          A version identifier string for the client software identified by          "software_id".  The value of the "software_version" SHOULD change          on any update to the client software identified by the same          "software_id".  The value of this field is intended to be compared          using string equality matching and no other comparison semantics          are defined by this specification.  The value of this field is          outside the scope of this specification, but it is not intended to          be human readable and is usually opaque to the client and          authorization server.  The definition of what constitutes an          update to client software that would trigger a change to this          value is specific to the software itself and is outside the scope          of this specification.                            client_information_response:    type: object    description: |      Response sent by the register request when registration is successful.      This follows the [Client Information Response](https://tools.ietf.org/html/rfc7591#section-3.2.2) specification.    properties:      client_id:        type: string        description: |          REQUIRED.  OAuth 2.0 client identifier string.  It SHOULD NOT be          currently valid for any other registered client, though an          authorization server MAY issue the same client identifier to          multiple instances of a registered client at its discretion.
      client_secret:        type: string        description: |          OAuth 2.0 client secret string.  If issued, this MUST          be unique for each "client_id" and SHOULD be unique for multiple          instances of a client using the same "client_id".  This value is          used by confidential clients to authenticate to the token          endpoint, as described in OAuth 2.0 [RFC6749], Section 2.3.1.
      client_id_issued_at:        type: string        description: |          OPTIONAL.  Time at which the client identifier was issued.  The          time is represented as the number of seconds from          1970-01-01T00:00:00Z as measured in UTC until the date/time of          issuance.
      client_secret_expires_at:        type: string        description: |          REQUIRED if "client_secret" is issued.  Time at which the client          secret will expire or 0 if it will not expire.  The time is          represented as the number of seconds from 1970-01-01T00:00:00Z as          measured in UTC until the date/time of expiration.                      redirect_uris:        description: |          The set of redirect_urls from the request that were registered        type: array        items:           type: string      token_endpoint_auth_method:        type: string        description: |          The token_endpoint_auth_method that was registered      grant_types:        type: array        items:           type: string        description: |          An array of grant types that were registered      response_types:        type: array        items:           type: string        description: |          An array of response_types that were registered      client_name:        type: string        description: |          The client_name that was registered      client_uri:        type: string        description: |          The client_url that was registered      logo_uri:        type: string        description: |          The logo_uri that was registered      scope:        type: string        description: |          A comma seperated list of scopes that were registered      contacts:        type: string        description: |          A comma seperated list of contacts that were registered      tos_uri:        type: string        description: |          <DISCUSS - Not supported>          The tos_uri that was registered
      policy_uri:        type: string        description: |          The policy_uri that was registered
      jwks_uri:        type: string        description: |          <DISCUSS - Not used>          The jwks_uri that was registered
      jwks:        type: string        description: |          <DISCUSS - Not used>          The jwks string that was registered
      software_id:        type: string        description: |          <DISCUSS - Not used>          The software_id that was registered
      software_version:        type: string        description: |          <DISCUSS - Not used>          The software_version that was registered            client_registration_error_response:    type: object    description: |      Response sent by the register request when registration is unsuccessful.      This follows the [Client Registration Error Response](https://tools.ietf.org/html/rfc7591#section-3.2.2) specification.          properties:      error:        type: string        description: |          REQUIRED.  Single ASCII error code string.           The specification defines the following error codes:                   invalid_redirect_uri              The value of one or more redirection URIs is invalid.                   invalid_client_metadata              The value of one of the client metadata fields is invalid and the              server has rejected this request.  Note that an authorization              server MAY choose to substitute a valid value for any requested              parameter of a client's metadata.                   invalid_software_statement              The software statement presented is invalid.                   unapproved_software_statement              The software statement presented is not approved for use by this              authorization server.    
      error_description:        type: string        description: |          OPTIONAL.  Human-readable ASCII text description of the error used          for debugging.
